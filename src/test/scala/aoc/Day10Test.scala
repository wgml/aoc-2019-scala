package aoc

import org.scalatest.FunSuite

class Day10Test extends FunSuite {
  test("Day10.first") {
    assert(Day10.first(".#..#\n.....\n#####\n....#\n...##".split('\n')) === 8)
    assert(Day10.first("......#.#.\n#..#.#....\n..#######.\n.#.#.###..\n.#..#.....\n..#....#.#\n#..#....#.\n.##.#..###\n##...#..#.\n.#....####".split('\n')) === 33)
    assert(Day10.first("#.#...#.#.\n.###....#.\n.#....#...\n##.#.#.#.#\n....#.#.#.\n.##..###.#\n..#...##..\n..##....##\n......#...\n.####.###.".split('\n')) === 35)
    assert(Day10.first(".#..#..###\n####.###.#\n....###.#.\n..###.##.#\n##.##.#.#.\n....###..#\n..#.#..#.#\n#..#.#.###\n.##...##.#\n.....#.#..".split('\n')) === 41)
    assert(Day10.first(".#..##.###...#######\n##.############..##.\n.#.######.########.#\n.###.#######.####.#.\n#####.##.#.##.###.##\n..#####..#.#########\n####################\n#.####....###.#.#.##\n##.#################\n#####.##.###..####..\n..######..##.#######\n####.##.####...##..#\n.#####..#.######.###\n##...#.##########...\n#.##########.#######\n.####.#.###.###.#.##\n....##.##.###..#####\n.#.#.###########.###\n#.#.#.#####.####.###\n###.##.####.##.#..##".split('\n')) === 210)
  }
  test("Day10.second") {
    assert(Day10.second(".#..##.###...#######\n##.############..##.\n.#.######.########.#\n.###.#######.####.#.\n#####.##.#.##.###.##\n..#####..#.#########\n####################\n#.####....###.#.#.##\n##.#################\n#####.##.###..####..\n..######..##.#######\n####.##.####...##..#\n.#####..#.######.###\n##...#.##########...\n#.##########.#######\n.####.#.###.###.#.##\n....##.##.###..#####\n.#.#.###########.###\n#.#.#.#####.####.###\n###.##.####.##.#..##".split('\n')) === 802)
  }

  test("Day10.findNthDestroyed") {
    {
      val map = Day10.parseMap(".#..##.###...#######\n##.############..##.\n.#.######.########.#\n.###.#######.####.#.\n#####.##.#.##.###.##\n..#####..#.#########\n####################\n#.####....###.#.#.##\n##.#################\n#####.##.###..####..\n..######..##.#######\n####.##.####...##..#\n.#####..#.######.###\n##...#.##########...\n#.##########.#######\n.####.#.###.###.#.##\n....##.##.###..#####\n.#.#.###########.###\n#.#.#.#####.####.###\n###.##.####.##.#..##".split('\n'))
      assert(Day10.findNthDestroyed(map.clone(), (11, 13), 1) === (11, 12))
      assert(Day10.findNthDestroyed(map.clone(), (11, 13), 2) === (12, 1))
      assert(Day10.findNthDestroyed(map.clone(), (11, 13), 3) === (12, 2))
      assert(Day10.findNthDestroyed(map.clone(), (11, 13), 10) === (12, 8))
      assert(Day10.findNthDestroyed(map.clone(), (11, 13), 20) === (16, 0))
      assert(Day10.findNthDestroyed(map.clone(), (11, 13), 50) === (16, 9))
      assert(Day10.findNthDestroyed(map.clone(), (11, 13), 100) === (10, 16))
      assert(Day10.findNthDestroyed(map.clone(), (11, 13), 199) === (9, 6))
      assert(Day10.findNthDestroyed(map.clone(), (11, 13), 200) === (8, 2))
      assert(Day10.findNthDestroyed(map.clone(), (11, 13), 201) === (10, 9))
      assert(Day10.findNthDestroyed(map.clone(), (11, 13), 299) === (11, 1))
    }
  }

}
